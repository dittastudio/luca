// This file was generated by the storyblok CLI.
// DO NOT MODIFY THIS FILE BY HAND.
import type { ISbStoryData } from "storyblok";
export type MultilinkStoryblok =
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      anchor?: string;
      rel?: string;
      title?: string;
      prep?: string;
      linktype: "story";
      story?: {
        name: string;
        created_at?: string;
        published_at?: string;
        id: number;
        uuid: string;
        content?: {
          [k: string]: any;
        };
        slug: string;
        full_slug: string;
        sort_by_date?: null | string;
        position?: number;
        tag_list?: string[];
        is_startpage?: boolean;
        parent_id?: null | number;
        meta_data?: null | {
          [k: string]: any;
        };
        group_id?: string;
        first_published_at?: string;
        release_id?: null | number;
        lang?: string;
        path?: null | string;
        alternates?: any[];
        default_full_slug?: null | string;
        translated_slugs?: null | any[];
        [k: string]: any;
      };
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      linktype: "url";
      rel?: string;
      title?: string;
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      email?: string;
      linktype: "email";
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      linktype: "asset";
      [k: string]: any;
    };

export interface BlockButtonStoryblok {
  title: string;
  link: Exclude<MultilinkStoryblok, {linktype?: "asset"}>;
  connecting_line?: boolean;
  component: "block_button";
  _uid: string;
  [k: string]: any;
}

export interface AssetStoryblok {
  alt: string | null;
  copyright?: string | null;
  fieldtype: "asset";
  id: number;
  filename: string | null;
  name: string;
  title: string | null;
  focus: string | null;
  meta_data?: {
    [k: string]: any;
  };
  source?: string | null;
  is_external_url?: boolean;
  is_private?: boolean;
  src?: string;
  updated_at?: string;
  width?: number | null;
  height?: number | null;
  aspect_ratio?: number | null;
  public_id?: string | null;
  content_type?: string;
  [k: string]: any;
}

export interface BlockCardStoryblok {
  title: string;
  headline: string;
  media: AssetStoryblok;
  ratio: number | string;
  link: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  column_start: number | string;
  column_end: number | string;
  connecting_line?: boolean;
  component: "block_card";
  _uid: string;
  [k: string]: any;
}

export interface BlockCardEditorialStoryblok {
  title: string;
  media: AssetStoryblok;
  ratio: number | string;
  link: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  column_start: number | string;
  column_end: number | string;
  connecting_line?: boolean;
  component: "block_card_editorial";
  _uid: string;
  [k: string]: any;
}

export interface BlockCarouselStoryblok {
  items: SlideStoryblok[];
  two_per_slide?: boolean;
  autoplay?: boolean;
  connecting_line?: boolean;
  component: "block_carousel";
  _uid: string;
  [k: string]: any;
}

export interface BlockGalleryStoryblok {
  items: SlideStoryblok[];
  connecting_line?: boolean;
  component: "block_gallery";
  _uid: string;
  [k: string]: any;
}

export interface BlockMediaStoryblok {
  media: AssetStoryblok;
  caption?: string;
  ratio: number | string;
  column_start: number | string;
  column_end: number | string;
  connecting_line?: boolean;
  component: "block_media";
  _uid: string;
  [k: string]: any;
}

export interface BlockMenusStoryblok {
  media?: AssetStoryblok;
  menus?: MenuStoryblok[];
  component: "block_menus";
  _uid: string;
  [k: string]: any;
}

export interface BlockPlayerStoryblok {
  media_url: string;
  autoplay?: boolean;
  component: "block_player";
  _uid: string;
  [k: string]: any;
}

export interface BlockShopifyCollectionStoryblok {
  handle: string;
  component: "block_shopify_collection";
  _uid: string;
  [k: string]: any;
}

export interface RichtextStoryblok {
  type: string;
  content?: RichtextStoryblok[];
  marks?: RichtextStoryblok[];
  attrs?: any;
  text?: string;
  [k: string]: any;
}

export interface BlockSplitStoryblok {
  media: AssetStoryblok;
  caption?: string;
  ratio: number | string;
  text: RichtextStoryblok;
  reversed?: boolean;
  connecting_line?: boolean;
  component: "block_split";
  _uid: string;
  [k: string]: any;
}

export interface BlockTextStoryblok {
  text: RichtextStoryblok;
  connecting_line?: boolean;
  component: "block_text";
  _uid: string;
  [k: string]: any;
}

export interface BlockTextColumnsStoryblok {
  title?: string;
  text: RichtextStoryblok;
  connecting_line?: boolean;
  component: "block_text_columns";
  _uid: string;
  [k: string]: any;
}

export interface ImageVideoStoryblok {
  media: AssetStoryblok;
  component: "image_video";
  _uid: string;
  [k: string]: any;
}

export interface LinkStoryblok {
  title: string;
  link: Exclude<MultilinkStoryblok, {linktype?: "asset"}>;
  component: "link";
  _uid: string;
  [k: string]: any;
}

export interface LinkListStoryblok {
  items: LinkStoryblok[];
  component: "link_list";
  _uid: string;
  [k: string]: any;
}

export interface MenuStoryblok {
  title: string;
  pdf: AssetStoryblok;
  component: "menu";
  _uid: string;
  [k: string]: any;
}

export interface PageStoryblok {
  seo: SeoStoryblok[];
  cover_message?: string;
  themes?: ThemeStoryblok[];
  blocks?: (
    | BlockButtonStoryblok
    | BlockCardStoryblok
    | BlockCardEditorialStoryblok
    | BlockCarouselStoryblok
    | BlockGalleryStoryblok
    | BlockMediaStoryblok
    | BlockMenusStoryblok
    | BlockPlayerStoryblok
    | BlockShopifyCollectionStoryblok
    | BlockSplitStoryblok
    | BlockTextStoryblok
    | BlockTextColumnsStoryblok
  )[];
  component: "page";
  _uid: string;
  [k: string]: any;
}

export interface SeoStoryblok {
  title: string;
  description: string;
  image: AssetStoryblok;
  component: "seo";
  _uid: string;
  [k: string]: any;
}

export interface SettingsStoryblok {
  cover_message?: string;
  navigation?: LinkListStoryblok[];
  opening_times_title?: string;
  opening_times?: RichtextStoryblok;
  contact_title?: string;
  contact?: RichtextStoryblok;
  reservations_title?: string;
  reservations?: RichtextStoryblok;
  newsletter_title?: string;
  newsletter?: RichtextStoryblok;
  footer?: LinkListStoryblok[];
  social_facebook?: string;
  social_tiktok?: string;
  social_instagram?: string;
  social_vimeo?: string;
  component: "settings";
  _uid: string;
  [k: string]: any;
}

export interface SlideStoryblok {
  media: AssetStoryblok;
  caption?: string;
  component: "slide";
  _uid: string;
  [k: string]: any;
}

export interface ThemeStoryblok {
  background: "white" | "offwhite" | "mint" | "green" | "olive" | "brown";
  text: "white" | "green";
  component: "theme";
  _uid: string;
  [k: string]: any;
}
